关于函数中的变量是怎么分配到栈中的问题：
c语言中，当声明一个变量(如int a，或者结构体，以及指针)时，编译器会为其分配内存空间，这个空间是分配在栈中的。
例如，int a[8];编译器会为其分配8个int大小的内存空间，就是8*4=32B的空间。这时，就让esp寄存器减去32，表示栈顶指针下移32B。


关于代码段和数据段的段描述符的问题：
代码段和数据段的段描述符都是以0为起始地址，以4GB为结束地址，但是代码段的段描述符的访问权限是只读，数据段的段描述符的访问权限是可读可写。

关于从高特权级跳转到低特权级的方法的问题：
在保护模式下，从高特权级跳转到低特权级的方法是使用iret指令，iret指令会从栈中弹出cs，eip，eflags，esp，ss，这五个寄存器的值，从而实现从高特权级跳转到低特权级。
一般情况下，都使用iret的方式进行跳转。

关于进程是如何切换的问题：（大致过程如下）
1、进程在时间片耗尽后，会进入时钟中断。
2、在进入时钟中断的这一时刻，会从TSS中找到0级栈的地址。
（至于为什么必须从TSS找到0级栈，完全是因为这是8086的机制：在特权级发生变化时，会自动从TSS中找到对应特权级的栈）。
（8086的机制是绕不开的，这个过程是由硬件自动完成的。如果是其他架构的CPU，那么在特权级发生变化时，可能就不会存在这样的机制。）
3、向0级栈中压入各种寄存器的值，包括cs，eip，eflags，esp，ss，这五个寄存器的值。并且将esp寄存器的内容更新为0级栈的栈指针。
（请注意，2和3是由硬件完成的。在触发时钟中断时，会把当前用户进程中的各种寄存器保存到0级栈中，然后把0级栈的栈指针赋值给esp）
4、也可能向0级栈中压入其他寄存器的值（例如eax等，一般是把通用寄存器都保存下来）。
5、把当前esp的值保存到当前PCB的中。请注意，这里的esp是0级栈的esp，不是用户栈的esp。
5、找到下一个PCB（称为PCB_next），从中找到上次保存的esp的值，赋值给esp寄存器。这里的esp是PCB_next的0级栈的栈指针。
6、从PCB_next的0级栈中弹出其他必要的寄存器的值（例如eax等，这取决于第4步保存了那些寄存器）。
7、执行iret指令，iret指令会从栈中弹出cs，eip，eflags，esp，ss，这五个寄存器的值，从而实现从高特权级跳转到低特权级。
（此时，cs，eip，eflags，esp，ss五个寄存器的值都恢复为PCB_next上次执行到的位置，esp也变为PCB_next的用户栈了。）
进程切换的大致过程如上，但还有些细节，例如切换页表，更新TSS中的esp0等。